class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        if grid[0][0] or grid[-1][-1]:
            return -1
        queue= collections.deque([(0,0,1)])
        direction=[(0,1),(0,-1),(1,0),(-1,0),(1,1),(-1,1),(-1,-1),(1,-1)]
        grid[0][0]=1
        
        while queue:
            x,y,path_len= queue.popleft()
            
            if (x,y) == (len(grid)-1,len(grid[0])-1):
                path_len=min(path_len, path_len)
                return path_len
                
                    
                    
                    
                        
            for inc_x,inc_y in direction:
                        x_new=x+inc_x
                        y_new=y+inc_y
                        if (0<=x_new<len(grid)) and (0<=y_new<len(grid[0])) and not grid[x_new][y_new]:
                            grid[x_new][y_new]=1
                            path_len=min(path_len, path_len)
                            queue.append((x_new,y_new, path_len+1))
                        
                        
                        
        return -1
